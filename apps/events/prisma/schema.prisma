// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  RefCode       RefCode[]
  EventAdmin    EventAdmin[]
  Organizer     Organizer?
}

model Organizer {
  id              String  @id @default(cuid())
  stripeAccountId String?
  user            User    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  events        Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id           String       @id @default(cuid())
  start        DateTime
  end          DateTime
  name         String
  image        String?
  ticketImage  String?
  description  String? @db.Text
  ref_quantity Int?
  tickets      Ticket[]
  RefCode      RefCode[]
  Tier         Tier[]
  EventAdmin   EventAdmin[]
  location     EventLocation?
  organizerId  String?
  organizer    Organizer?        @relation(fields: [organizerId], references: [id], onDelete: Cascade)
}

model EventAdmin {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: NoAction)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventLocation {
  id      String @id @default(cuid())
  long    Float
  lat     Float
  name    String?
  event   Event  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ticket {
  id            String    @id @default(cuid())
  codeId        String?
  tierId        String?
  eventId       String
  userId        String
  refCodeId     Int?
  checkedInAt   DateTime?
  createdAt     DateTime  @default(now())
  paymentIntent String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  event         Event     @relation(fields: [eventId], references: [id], onDelete: NoAction)
  tier          Tier?     @relation(fields: [tierId], references: [id], onDelete: NoAction)
  refCode       RefCode?  @relation(fields: [refCodeId], references: [id], onDelete: NoAction)
  code          Code?     @relation(fields: [codeId], references: [id], onDelete: NoAction)
}

model Code {
  id      String   @id @default(cuid())
  code    String
  tierId  String
  type    String
  value   Float
  limit   Int
  tier    Tier     @relation(fields: [tierId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  @@unique([code, tierId])
}

model Tier {
  id      String   @id @default(cuid())
  price   Float
  start   DateTime
  end     DateTime
  eventId String
  name    String
  limit         Int?
  code    Code[]
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Ticket  Ticket[]
}

model RefCode {
  id      Int      @id @default(autoincrement())
  code    String
  userId  String
  eventId String
  tickets Ticket[]
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}
